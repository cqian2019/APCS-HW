//Cheryl Qian
//APCS pd1
//HW24b -- On the DLL
//2018-03-24

/*****************************************************
 * class LList
 * Implements a linked list of DLLNodes, each containing String data
 * new in v2: add-at-index, remove
 *****************************************************/

public class LList<T> implements List //your List interface must be in same dir
{ 

  //instance vars
    private DLLNode _head;
    private DLLNode _tail;
    private int _size;

  // constructor -- initializes instance vars
  public LList( )
  {
      _head = null; //at birth, a list has no elements
      _tail = null;
    _size = 0;
  }


  //--------------v  List interface methods  v--------------
    
  public boolean add( Object newVal )
  {
      if ( _size > 0 ) {
      	  DLLNode newNode = new DLLNode( newVal, null, null);
	  newNode.setPrev(_tail);
	  _tail.setNext(newNode);
	  _tail = newNode;
	  _size++;
	  return true;
      }
      

      else {
	  _head = new DLLNode ( newVal, null, null);
	  _tail = _head;
	  _size++;
	  return true;
      }
  }

    
  public Object get( int index )
  {
    if ( index < 0 || index >= size() )
	    throw new IndexOutOfBoundsException();

    Object retVal;
    DLLNode tmp = _head; //create alias to head

    if ( index <= _size / 2 ) {
	//walk to desired node
	for( int i=0; i < index; i++ )
	    tmp = tmp.getNext();
	    //check target node's cargo hold
	retVal = tmp.getCargo();
	return retVal;
    }

    else {
	for( int i = _size; i > index; i-- )
	    tmp = tmp.getPrev();
	//check target node's cargo hold
	retVal = tmp.getCargo();
	return retVal;
    }
  }


  public Object set( int index, Object newVal )
  {

    if ( index < 0 || index >= size() )
	    throw new IndexOutOfBoundsException();

 

    if ( index <= _size / 2 ) {
	
	DLLNode tmp = _head; //create alias to head
	//walk to desired node
	for( int i=0; i < index; i++ )
	    tmp = tmp.getNext();
	
	//store target node's cargo
	Object oldVal = tmp.getCargo();
	
	//modify target node's cargo
	tmp.setCargo( newVal );

	return oldVal;
    }

    else {

	DLLNode tmp = _tail; //create alias to tail
	//walk to desired node
	for( int i = _size; i > index; i-- )
	    tmp = tmp.getPrev();
	
	//store target node's cargo
	Object oldVal = tmp.getCargo();
	
	//modify target node's cargo
	tmp.setCargo( newVal );

	return oldVal;
    }
  }


  //return number of nodes in list
  public int size() { return _size; }
    

  //insert a node containing newVal at position index
  public void add( int index, Object newVal ) {

    if ( index < 0 || index >= size() )
	    throw new IndexOutOfBoundsException();

    DLLNode newNode = new DLLNode( newVal, null, null );

    //if index==0, insert node before head node
    if ( index == _size - 1 ) 
	    add( newVal );
    else if ( index == 0 ) {
	DLLNode tmp = new DLLNode( newVal, _head, null );
	tmp.setNext(_head);
	_head = tmp;
	_size++;
    }
    
    else {
	if ( index <= _size / 2 ) {
	    DLLNode tmp = _head; //create alias to head

	    //walk to node before desired node
	    for( int i=0; i < index-1; i++ )
		tmp = tmp.getNext();

	    //insert new node
	    newNode.setNext( tmp.getNext() );
	    tmp.setNext( newNode );
	    newNode.setPrev(tmp);
	    _size++;
	}

	else {
	    DLLNode tmp = _tail; //create alias to head

	    //walk to node before desired node
	    for( int i=_size; i > index-1; i-- )
		tmp = tmp.getPrev();

	    //insert new node
	    newNode.setPrev( tmp.getPrev() );
	    tmp.setPrev( newNode );
	    newNode.setNext(tmp);
	    _size++;
	}  
    }
  }


  //remove node at pos index, return its cargo
  public Object remove( int index ) {

    if ( index < 0 || index >= size() )
	    throw new IndexOutOfBoundsException();

    Object retVal;
    DLLNode tmp = _head; //create alias to head

    //if index==0, remove head node
    if ( index == 0 ) {
	    //check target node's cargo hold
	    retVal = _head.getCargo();

	    //remove target node
	    _head = _head.getNext();	    
    }

    else if ( index == _size - 1 ) {
	retVal = _tail.getCargo();
	_tail = _tail.getPrev();
    }
    else {
	if ( index <= _size / 2 ) {
	    //walk to node before desired node
	    for( int i=0; i < index-1; i++ )
		tmp = tmp.getNext();

	    //check target node's cargo hold
	    retVal = tmp.getPrev().getCargo();

	    //remove target node
	    tmp.setNext( tmp.getNext().getNext() );
	    tmp.getNext().setPrev(tmp);
	}
	
	else {
	    //walk to node before desired node
	    for( int i = _size; i > index + 1; i-- )
		tmp = tmp.getPrev();

	    //check target node's cargo hold
	    retVal = tmp.getNext().getCargo();

	    //remove target node
	    tmp.setPrev( tmp.getPrev().getPrev() );
	    tmp.getPrev().setNext(tmp);    
	}
    }
	
    //decrement size attribute
    _size--;

    return retVal;
  }

  //--------------^  List interface methods  ^--------------


  // override inherited toString
  public String toString()
  {
    String retStr = "HEAD->";
    DLLNode tmp = _head; //init tr
    while( tmp != null ) {
	    retStr += tmp.getCargo() + "->";
	    tmp = tmp.getNext();
    }
    retStr += "NULL";
    return retStr;
  }


  //main method for testing
  public static void main( String[] args )
  {

    LList james = new LList();

    System.out.println( james );
    System.out.println( "size: " + james.size() );

    james.add("I");
    System.out.println( james );
    System.out.println( "size: " + james.size() );

    james.add("need");
    System.out.println( james );
    System.out.println( "size: " + james.size() );

    james.add("a");
    System.out.println( james );
    System.out.println( "size: " + james.size() );

    james.add("beat");
    System.out.println( james );
    System.out.println( "size: " + james.size() );

    System.out.println( "2nd item is: " + james.get(1) );

    james.set(1,"got");
    System.out.println( "...and now 2nd item is: " + james.get(1));
    System.out.println( james );

    james.add(0,"whut");
    System.out.println( "...after add(0,whut): " );
    System.out.println( james );

    james.add(4,"phat");
    System.out.println( "...after add(4,phat): " );
    System.out.println( james );

    System.out.println( "...after remove last: " 
                        + james.remove( james._size-1) );
    System.out.println( james );

    System.out.println( "...after remove(0): " + james.remove(0) );
    System.out.println( james );

    System.out.println( "...after remove(0): " + james.remove(0) );
    System.out.println( james );

    System.out.println( "...after remove(0): " + james.remove(0) );
    System.out.println( james );
  }

}//end class LList


